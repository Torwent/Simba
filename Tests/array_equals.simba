{$assertions on}

procedure TestIntegerArray;
var
  a,b: TIntegerArray;
begin
  a := [];
  b := [];
  Assert(a.Equals(b));

  a := [1];
  b := [];
  Assert(not a.Equals(b));

  a := [1];
  b := [1];
  Assert(a.Equals(b));

  a := [1];
  b := [-1];
  Assert(not a.Equals(b));

  a := [3,2,1];
  b := [3,2,1];
  Assert(a.Equals(b));

  a := [3,2,1];
  b := [2,3,1];
  Assert(not a.Equals(b));
end;

procedure TestSingleArray;
var
  a,b: TSingleArray;
begin
  a := [];
  b := [];
  Assert(a.Equals(b));

  a := [1];
  b := [];
  Assert(not a.Equals(b));

  a := [1.34];
  b := [1.34];
  Assert(a.Equals(b));

  a := [1.01];
  b := [-1.01];
  Assert(not a.Equals(b));

  a := [3.09,2.2,1];
  b := [3.09,2.2,1];
  Assert(a.Equals(b));

  a := [2,3.1,1];
  b := [2,3,1];
  Assert(not a.Equals(b));
end;

procedure TestPointArray;
var
  a,b: TPointArray;
begin
  a := [];
  b := [];
  Assert(a.Equals(b));

  a := [[0,0]];
  b := [];
  Assert(not a.Equals(b));

  a := [[1,2]];
  b := [[1,2]];
  Assert(a.Equals(b));

  a := [[1,2]];
  b := [[-1,-2]];
  Assert(not a.Equals(b));

  a := [[3,3],[3,3],[1,1]];
  b := [[3,3],[3,3],[1,1]];
  Assert(a.Equals(b));

  a := [[3,3],[3,3],[0,0]];
  b := [[3,3],[3,3],[3,0]];
  Assert(not a.Equals(b));
end;

begin
  TestIntegerArray();
  TestSingleArray();
  TestPointArray();
end;
