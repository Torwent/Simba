{$assertions on}

procedure TestIntegerArray;

  function Success(a,b: TIntegerArray): Boolean;
  var i: Int32;
  begin
    if (Length(a) <> Length(b)) then
      Exit(False);
    for i:=0 to High(a) do
      if not Contains(a[i], b) then
        Exit(False);
    Result := True;
  end;

var
  a,b: TIntegerArray;
begin
  a := [1,2,3];
  b := [3,2,1];
  Assert(Success(a.Difference(b), []));
  Assert(Success(a.SymDifference(b), []));
  Assert(Success(a.Intersection(b), [3,2,1]));

  a := [1,2,3,4];
  b := [5,4,3];
  Assert(Success(a.Difference(b), [1, 2]));
  Assert(Success(a.SymDifference(b), [1, 2, 5]));
  Assert(Success(a.Intersection(b), [3, 4]));
end;

procedure TestInt64Array;
var
  a,b: TInt64Array;
begin
  //a := [1,2,3];
  //b := [3,2,1];
  //Assert(ToString(a.Difference(b)) = '[]');
  //Assert(ToString(a.SymDifference(b)) = '[]');
  //Assert(ToString(a.Intersection(b)) = '[3, 2, 1]');
  //
  //a := [1,2,3,4];
  //b := [5,4,3];
  //Assert(ToString(a.Difference(b)) = '[1, 2]');
  //Assert(ToString(a.SymDifference(b)) = '[1, 2, 5]');
  //Assert(ToString(a.Intersection(b)) = '[3, 4]');
end;

procedure TestPointArray;

  function Success(a,b: TPointArray): Boolean;
  var i: Int32;
  begin
    if (Length(a) <> Length(b)) then
      Exit(False);
    for i:=0 to High(a) do
      if not Contains(a[i], b) then
        Exit(False);
    Result := True;
  end;

var
  a,b: TPointArray;
begin
  a := [[1,1],[2,2],[3,3]];
  b := [[3,3],[2,2],[1,1]];
  Assert(Success(a.Difference(b), []));
  Assert(Success(a.SymDifference(b), []));
  Assert(Success(a.Intersection(b), [[3,3],[2,2],[1,1]]));

  a := [[1,2],[2,3],[3,4]];
  b := [[1,2],[2,3]];
  Assert(Success(a.Difference(b), [[3,4]]));
  Assert(Success(a.SymDifference(b), [[3,4]]));
  Assert(Success(a.Intersection(b), [[1,2],[2,3]]));
end;

procedure TestBoxArray;

  function Success(a,b: TBoxArray): Boolean;
  var i: Int32;
  begin
    if (Length(a) <> Length(b)) then
      Exit(False);
    for i:=0 to High(a) do
      if not Contains(a[i], b) then
        Exit(False);
    Result := True;
  end;

var
  a,b: TBoxArray;
begin
  a := [[1,1,1,1],[2,2,2,2],[3,3,3,3]];
  b := [[3,3,3,3],[2,2,2,2],[1,1,1,1]];

  Assert(Success(a.Difference(b), []));
  Assert(Success(a.SymDifference(b), []));
  Assert(Success(a.Intersection(b), [[3,3,3,3],[2,2,2,2],[1,1,1,1]]));

  a := [[1,1,1,1],[2,2,2,2],[3,3,3,3]];
  b := [[1,1,1,1],[2,2,2,2]];

  Assert(Success(a.Difference(b), [[3,3,3,3]]));
  Assert(Success(a.SymDifference(b), [[3,3,3,3]]));
  Assert(Success(a.Intersection(b), [[1,1,1,1],[2,2,2,2]]));
end;

procedure TestATPA;
var
  a: T2DPointArray;
begin
  a += [[0,0],[1,1],[2,2],[3,3]];
  a += [[1,1],[2,2],[3,3],[50,50],[-1,-1]];
  a += [[0,0]];
  a += [];
  a += [[1,1],[2,2],[3,3],[-1,-1]];

  Assert(ToString(a.Intersection()) = '[{X = 1, Y = 1}, {X = 2, Y = 2}, {X = 3, Y = 3}]');
end;

begin
  TestIntegerArray();
  TestInt64Array();
  TestPointArray();
  TestBoxArray();
  TestATPA();
end;
