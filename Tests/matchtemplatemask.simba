{$assertions on}

var
  img, templ: TImage;

procedure test(formula: ETMFormula; minLoc, maxLoc: TPoint; minValue, maxValue: Single = 0);
var
  mat: TSingleMatrix;
begin
  try
    mat := MatchTemplateMask(img.ToMatrix(), templ.ToMatrix(), formula);
    Assert(mat.ArgMin = minLoc);
    Assert(mat.ArgMax = maxLoc);

    if (minValue <> 0) and (maxValue <> 0) then
    begin
      Assert(Abs(mat[minLoc.Y, minLoc.X] - minValue) <= 0.05);
      Assert(Abs(mat[maxLoc.Y, maxLoc.X] - maxValue) <= 0.05);
    end;
  except
    WriteLn(Formula, ' :: ', mat.ArgMin(), ', ', mat.ArgMax(), ', ', Round(mat[mat.ArgMin().Y, mat.ArgMin().X], 1), ', ', Round(mat[mat.ArgMax().Y, mat.ArgMax().X], 1));
    raise;
  end;
end;

procedure testCache(formula: ETMFormula; minLoc, maxLoc: TPoint; minValue, maxValue: Single = 0);
var
  mat: TSingleMatrix;
  cache: TMatchTemplateCache;
begin
  try
    cache := TMatchTemplateCache.Create(img.toMatrix(), templ.ToMatrix(), formula);
    mat := MatchTemplateMask(cache, templ.ToMatrix(), formula);
    Assert(mat.ArgMin() = minLoc);
    Assert(mat.ArgMax() = maxLoc);

    if (minValue <> 0) and (maxValue <> 0) then
    begin
      Assert(Abs(mat[minLoc.Y, minLoc.X] - minValue) <= 0.05);
      Assert(Abs(mat[maxLoc.Y, maxLoc.X] - maxValue) <= 0.05);
    end;
  except
    WriteLn(Formula, ' :: ', mat.ArgMin(), ', ', mat.ArgMax(), ', ', Round(mat[mat.ArgMin().Y, mat.ArgMin().X], 1), ', ', Round(mat[mat.ArgMax().Y, mat.ArgMax().X], 1));
    raise;
  finally
    cache.free();
  end;
end;

begin
  img := TImage.CreateFromString('IMG:');
  templ := img.Copy([50,50,100,100]);
  templ.DrawColor := 0;
  templ.DrawCircleInverted(templ.Center, 20);

  try
    test(TM_CCOEFF, [83, 1], [50, 50]);
    test(TM_CCOEFF_NORMED, [24, 19], [50, 50], -0.2, 1);

    test(TM_CCORR, [80, 14], [53, 0]);
    test(TM_CCORR_NORMED, [77, 1], [50, 50], 0.8, 1);

    test(TM_SQDIFF, [50, 50], [54, 0]);
    test(TM_SQDIFF_NORMED, [50, 50], [59, 0], 0, 0.4);

    testCache(TM_CCOEFF, [83, 1], [50, 50]);
    testCache(TM_CCOEFF_NORMED, [24, 19], [50, 50], -0.2, 1);

    testCache(TM_CCORR, [80, 14], [53, 0]);
    testCache(TM_CCORR_NORMED, [77, 1], [50, 50], 0.8, 1);

    testCache(TM_SQDIFF, [50, 50], [54, 0]);
    testCache(TM_SQDIFF_NORMED, [50, 50], [59, 0], 0, 0.4);
  finally
    img.free();
    templ.free();
  end;
end.
