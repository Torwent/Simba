{$assertions on}

var
  lock: TLock := TLock.Create();
  counter, errors: Integer;

procedure TestWithLocks;
var
  expected: Integer;
  timeout: UInt64 := GetTickCount() + 1000;
begin
  while Timeout > GetTickCount() do
  begin
    lock.Enter();
    expected := counter;
    sleep(10);
    if (counter <> expected) then
      Inc(errors);
    inc(counter);
    lock.Leave();
  end;
end;

procedure TestWithoutLocks;
var
  expected: Integer;
  timeout: UInt64 := GetTickCount() + 1000;
begin
  while Timeout > GetTickCount() do
  begin
    expected := counter;
    sleep(10);
    if (counter <> expected) then
      Inc(errors);
    inc(counter);
  end;
end;

begin
  lock.FreeOnTerminate := True;

  counter := 0;
  errors := 0;
  RunInThread(@TestWithoutLocks);
  RunInThread(@TestWithoutLocks);
  RunInThread(@TestWithoutLocks);
  Sleep(2500);
  Assert(errors > 0);

  counter := 0;
  errors := 0;
  RunInThread(@TestWithLocks);
  RunInThread(@TestWithLocks);
  RunInThread(@TestWithLocks);
  Sleep(2500);
  Assert(errors = 0);
end;
