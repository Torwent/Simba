{$assertions on}

// Test our native overrides

var
  Singles: TSingleArray = [1,2,3,3,2,1,0];
  Doubles: TDoubleArray = [1,2,3,3,2,1,0];
  Ints: TIntegerArray = [1,2,3,3,2,1,0];
  Int64s: TInt64Array = [1,2,3,3,2,1,0];
  Strings: TStringArray = ['1','2','3','3','2','1','0','abc','abc'];
  Points: TPointArray = [[-5,-5],[0,0],[2,2],[5,5],[0,0],[5,5],[2,2],[2,2]];
  Boxes: TBoxArray = [[0,0,0,0],[1,1,1,1],[2,2,2,2],[0,0,0,0],[2,2,2,2]];
  Cols: TColorArray = [1,2,3,3,2,1,0,High(TColor),Low(TColor)];

begin
  Assert(Unique(Points).Equals([[-5,-5],[0,0],[2,2],[5,5]]));
  Assert(Unique(Boxes).Equals([[0,0,0,0], [1,1,1,1], [2,2,2,2]]));
  Assert(ToString(Unique(Singles)) = '[1, 2, 3, 0]');
  Assert(ToString(Unique(Doubles)) = '[1, 2, 3, 0]');
  Assert(ToString(Unique(Ints)) = '[1, 2, 3, 0]');
  Assert(ToString(Unique(Int64s)) = '[1, 2, 3, 0]');
  Assert(ToString(Unique(Int64s)) = '[1, 2, 3, 0]');
  Assert(ToString(Unique(Strings)) = '[1, 2, 3, 0, abc]');
  Assert(ToString(Unique(Cols)) = '[1, 2, 3, 0, 2147483647, -2147483648]');
end.
