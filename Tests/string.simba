{$assertions on}

procedure TestStringIs;
begin
  Assert('123'.IsNumeric);
  Assert(not 'abc123'.IsNumeric);

  Assert('123'.IsInteger);
  Assert(not 'abc123'.IsNumeric);

  Assert('123'.IsFloat);
  Assert('123.456'.IsFloat);
  Assert(not 'abc123'.IsFloat);

  Assert('123'.IsAlphaNum);
  Assert('abc123'.IsAlphaNum);
  Assert(not '-123'.IsAlphaNum);
  Assert(not '#abc'.IsAlphaNum);

  Assert('abc'.IsAlpha);
  Assert(not 'abc123'.IsAlpha);

  Assert('abc'.IsLower);
  Assert(not 'Abc'.IsLower);

  Assert('ABC'.IsUpper);
  Assert(not 'Abc'.IsUpper);
end;

procedure TestStringCopyDeleteInsert;
var
  Str: String;
begin
  Str := 'HoiHola';
  Str.Insert('Hello', 4);
  Assert(Str = 'HoiHelloHola');

  Str := 'xyz';
  Str.DeleteIndex(2);
  Assert(Str = 'xz');

  Str := 'abc123xyz';
  Str.DeleteRange(4,6);
  Assert(Str = 'abcxyz');

  Str := 'abc123xyz';
  Assert(Str.Copy() = 'abc123xyz');
  Assert(Str.CopyRange(4,6) = '123');
end;

procedure TestStringExtract;
var
  Str: String;
begin
  Str := '1.23';
  Assert(ToString(Str.ExtractInteger()) = '123');
  Assert(ToString(Str.ExtractFloat()) = '1.23');
  Str := '123abcxyz';
  Assert(Str.Extract(['a','b','c']) = 'abc');
  Str := '123';
  Assert(Str.Extract(['a','b','c']) = '');
  Str := 'hello123world.456';
  Assert(ToString(Str.ExtractFloat) = '123.456');
  Str := '-hello123world.456';
  Assert(ToString(Str.ExtractFloat) = '-123.456');
end;

procedure TestStringToXXX;
var
  Str: String;
begin
  Str := '123';
  Assert(Str.ToInteger() = 123);
  Assert(Str.ToInt64() = 123);
  Str := '1.23';
  Assert(Str.ToSingle() = Single(1.23));
  Assert(Str.ToDouble() = Double(1.23));

  Str := 'True';
  Assert(Str.ToBoolean = True);
  Str := 'False';
  Assert(Str.ToBoolean = False);
  Str := '1';
  Assert(Str.ToBoolean = True);
  Str := '0';
  Assert(Str.ToBoolean = False);

  Str := 'abc XYZ';
  Assert(Str.ToLower = 'abc xyz');
  Assert(Str.ToUpper = 'ABC XYZ');
  Assert(Str.SwapCase = 'ABC xyz');
  Assert(Str.Capitalize = 'Abc xyz');
  Assert(Str.CapitalizeWords = 'Abc Xyz');

  Str := 'abc';
  Assert(Str.ToBytes.Equals([97,98,99]));
end;

procedure TestStringSplitJoin;
var
  Str: String;
begin
  Str := 'beforemiddleafter';
  Assert(Str.Partition('middle').Equals(['before', 'middle', 'after']));

  Str := 'Hello World 1,2,3';
  Assert(ToString(Str.Split(' ')) = '[Hello, World, 1,2,3]');

  Str := '|1||2|3|';
  Assert(ToString(Str.Split('|')) = '[1, 2, 3]');

  Str := 'WorldHelloWorldHelloWorldWorld';
  Assert(ToString(Str.Split('World')) = '[Hello, Hello]');

  Str := '@ @@@@@@';
  Assert(ToString(Str.Split('@@@@@')) = '[@ , @]');

  Str := 'abcdef';
  Assert(ToString(Str.Split('nothin')) = '[abcdef]');

  Str := 'abcdef';
  Assert(ToString(Str.Split('f')) = '[abcde]');

  Str := 'Hello'+#13#10+'World'+#13#10+'1'+#10+'2'+#13#10+#13#10;
  Assert(ToString(Str.SplitLines()) = '[Hello, World, 1, 2, ]');

  Assert(#32.Join(['a']) = 'a');
  Assert(#32.Join(['a','b']) = 'a b');
  Assert(#32.Join(['a','b','c','d']) = 'a b c d');

  Assert(String(' ').Join(['a']) = 'a');
  Assert(String(' ').Join(['a','b']) = 'a b');
  Assert(String(' ').Join(['a','b','c','d']) = 'a b c d');

  Assert(String(' ').Join(['aaa', 'bb', 'c']) = 'aaa bb c');
  Assert(String(' ').Join(['aaa', '', 'bb', '', 'c']) = 'aaa  bb  c');
  Assert(String(' ').Join(['aaa', '', 'bb', '', 'c', '']) = 'aaa  bb  c ');
end;

var
  Str: String;
begin
  Str := 'abc1';
  Assert(Str.Pop = '1');
  Assert(Str.First = 'a');
  Assert(Str.Last = 'c');

  Assert(Str.Low = 1);
  Assert(Str.High = 3);
  Assert(Str.Length = 3);

  Str.SetLength(10);
  Assert(Str.Length = 10);
  Str.SetLength(0);
  Assert(Str.Length = 0);

  Assert('abcxyz'.Equals('abcxyz'));
  Assert(not 'abcxyz'.Equals('Abcxyz'));
  Assert('abcxyz'.Equals('Abcxyz', False));
  Assert(not 'abcxyz123'.Equals('abcxyz', False));

  TestStringIs();
  TestStringCopyDeleteInsert();
  TestStringExtract();
  TestStringToXXX();
  TestStringSplitJoin();
end;
