{$assertions on}

// Test our native overrides

procedure TestStringArray;
var
  Arr: TStringArray;
begin
  Assert(Arr.IndexOf('abc')=-1);
  Arr := ['abc'];
  Assert(Arr.IndexOf('abc')=0);
  Arr := ['abc','xyz'];
  Assert(Arr.IndexOf('xyz')=1);
  Arr := ['abc', 'xyz', '123', 'hello', 'world', 'xyz', 'hello'];
  Assert(Arr.IndexOf('hello')=3);
  Assert(Arr.IndicesOf('hello').Equals([3,6]));
end;

procedure TestIntegerArray;
var
  Arr: TIntegerArray;
begin
  Assert(Arr.IndexOf(0)=-1);
  Arr := [0];
  Assert(Arr.IndexOf(0)=0);
  Arr := [1,0];
  Assert(Arr.IndexOf(0)=1);
  Arr := [3,-1,0,1,0,-123];
  Assert(Arr.IndexOf(1)=3);
  Assert(Arr.IndicesOf(0).Equals([2,4]));
end;

procedure TestPointArray;
var
  Arr: TPointArray;
begin
  Assert(Arr.IndexOf([0,0])=-1);
  Arr := [[0,0]];
  Assert(Arr.IndexOf([0,0])=0);
  Arr := [[0,1],[0,0]];
  Assert(Arr.IndexOf([0,0])=1);
  Arr := [[-1,-1],[0,0],[123,123],[123,123]];
  Assert(Arr.IndexOf([123,123])=2);
  Arr := [[1,2],[3,4],[5,6],[1,2]];
  Assert(Arr.IndicesOf([1,2]).Equals([0,3]));
end;

begin
  TestStringArray();
  TestIntegerArray();
  TestPointArray();
end;
